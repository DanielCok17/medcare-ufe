/* tslint:disable */
/* eslint-disable */
/**
 * MedCare API
 * MedCare system API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: <your_email>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AllergyRecord
 */
export interface AllergyRecord {
    /**
     * Unique id of the allergy record
     * @type {string}
     * @memberof AllergyRecord
     */
    'id': string;
    /**
     * Unique identifier of the patient
     * @type {string}
     * @memberof AllergyRecord
     */
    'patientId': string;
    /**
     * 
     * @type {string}
     * @memberof AllergyRecord
     */
    'allergen': string;
}
/**
 * 
 * @export
 * @interface LabResult
 */
export interface LabResult {
    /**
     * Unique id of the lab result
     * @type {string}
     * @memberof LabResult
     */
    'id': string;
    /**
     * Unique identifier of the patient
     * @type {string}
     * @memberof LabResult
     */
    'patientId': string;
    /**
     * 
     * @type {string}
     * @memberof LabResult
     */
    'testType': string;
    /**
     * 
     * @type {string}
     * @memberof LabResult
     */
    'result': string;
}
/**
 * 
 * @export
 * @interface MedicalRecord
 */
export interface MedicalRecord {
    /**
     * Unique id of the medical record
     * @type {string}
     * @memberof MedicalRecord
     */
    'id': string;
    /**
     * Unique identifier of the patient
     * @type {string}
     * @memberof MedicalRecord
     */
    'patientId': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalRecord
     */
    'condition': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalRecord
     */
    'treatment': string;
    /**
     * 
     * @type {string}
     * @memberof MedicalRecord
     */
    'history'?: string;
}
/**
 * 
 * @export
 * @interface VaccinationRecord
 */
export interface VaccinationRecord {
    /**
     * Unique id of the vaccination record
     * @type {string}
     * @memberof VaccinationRecord
     */
    'id': string;
    /**
     * Unique identifier of the patient
     * @type {string}
     * @memberof VaccinationRecord
     */
    'patientId': string;
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'vaccine': string;
    /**
     * 
     * @type {string}
     * @memberof VaccinationRecord
     */
    'date': string;
}

/**
 * AllergyRecordsApi - axios parameter creator
 * @export
 */
export const AllergyRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove a specific allergy record by its ID
         * @summary Delete an allergy record
         * @param {string} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllergyRecord: async (recordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('deleteAllergyRecord', 'recordId', recordId)
            const localVarPath = `/allergy-records/{recordId}`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all allergy records
         * @summary Get all allergy records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAllergyRecords: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/allergy-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific allergy record by its ID
         * @summary Get an allergy record by ID
         * @param {string} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllergyRecordById: async (recordId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('getAllergyRecordById', 'recordId', recordId)
            const localVarPath = `/allergy-records/{recordId}`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AllergyRecordsApi - functional programming interface
 * @export
 */
export const AllergyRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AllergyRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove a specific allergy record by its ID
         * @summary Delete an allergy record
         * @param {string} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllergyRecord(recordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllergyRecord(recordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all allergy records
         * @summary Get all allergy records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAllergyRecords(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AllergyRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAllergyRecords(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specific allergy record by its ID
         * @summary Get an allergy record by ID
         * @param {string} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllergyRecordById(recordId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllergyRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllergyRecordById(recordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AllergyRecordsApi - factory interface
 * @export
 */
export const AllergyRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AllergyRecordsApiFp(configuration)
    return {
        /**
         * Remove a specific allergy record by its ID
         * @summary Delete an allergy record
         * @param {string} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllergyRecord(recordId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAllergyRecord(recordId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all allergy records
         * @summary Get all allergy records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAllergyRecords(options?: any): AxiosPromise<Array<AllergyRecord>> {
            return localVarFp.getAllAllergyRecords(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific allergy record by its ID
         * @summary Get an allergy record by ID
         * @param {string} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllergyRecordById(recordId: string, options?: any): AxiosPromise<AllergyRecord> {
            return localVarFp.getAllergyRecordById(recordId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AllergyRecordsApi - interface
 * @export
 * @interface AllergyRecordsApi
 */
export interface AllergyRecordsApiInterface {
    /**
     * Remove a specific allergy record by its ID
     * @summary Delete an allergy record
     * @param {string} recordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllergyRecordsApiInterface
     */
    deleteAllergyRecord(recordId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve all allergy records
     * @summary Get all allergy records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllergyRecordsApiInterface
     */
    getAllAllergyRecords(options?: AxiosRequestConfig): AxiosPromise<Array<AllergyRecord>>;

    /**
     * Retrieve a specific allergy record by its ID
     * @summary Get an allergy record by ID
     * @param {string} recordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllergyRecordsApiInterface
     */
    getAllergyRecordById(recordId: string, options?: AxiosRequestConfig): AxiosPromise<AllergyRecord>;

}

/**
 * AllergyRecordsApi - object-oriented interface
 * @export
 * @class AllergyRecordsApi
 * @extends {BaseAPI}
 */
export class AllergyRecordsApi extends BaseAPI implements AllergyRecordsApiInterface {
    /**
     * Remove a specific allergy record by its ID
     * @summary Delete an allergy record
     * @param {string} recordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllergyRecordsApi
     */
    public deleteAllergyRecord(recordId: string, options?: AxiosRequestConfig) {
        return AllergyRecordsApiFp(this.configuration).deleteAllergyRecord(recordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all allergy records
     * @summary Get all allergy records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllergyRecordsApi
     */
    public getAllAllergyRecords(options?: AxiosRequestConfig) {
        return AllergyRecordsApiFp(this.configuration).getAllAllergyRecords(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific allergy record by its ID
     * @summary Get an allergy record by ID
     * @param {string} recordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AllergyRecordsApi
     */
    public getAllergyRecordById(recordId: string, options?: AxiosRequestConfig) {
        return AllergyRecordsApiFp(this.configuration).getAllergyRecordById(recordId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LabResultsApi - axios parameter creator
 * @export
 */
export const LabResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all lab results
         * @summary Get all lab results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLabResults: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lab-results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific lab result by its ID
         * @summary Get lab result by ID
         * @param {string} resultId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabResultById: async (resultId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultId' is not null or undefined
            assertParamExists('getLabResultById', 'resultId', resultId)
            const localVarPath = `/lab-results/{resultId}`
                .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific lab result by its ID
         * @summary Update a lab result
         * @param {string} resultId 
         * @param {LabResult} labResult 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabResult: async (resultId: string, labResult: LabResult, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultId' is not null or undefined
            assertParamExists('updateLabResult', 'resultId', resultId)
            // verify required parameter 'labResult' is not null or undefined
            assertParamExists('updateLabResult', 'labResult', labResult)
            const localVarPath = `/lab-results/{resultId}`
                .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(labResult, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LabResultsApi - functional programming interface
 * @export
 */
export const LabResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LabResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all lab results
         * @summary Get all lab results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLabResults(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LabResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLabResults(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specific lab result by its ID
         * @summary Get lab result by ID
         * @param {string} resultId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLabResultById(resultId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLabResultById(resultId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific lab result by its ID
         * @summary Update a lab result
         * @param {string} resultId 
         * @param {LabResult} labResult 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLabResult(resultId: string, labResult: LabResult, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLabResult(resultId, labResult, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LabResultsApi - factory interface
 * @export
 */
export const LabResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LabResultsApiFp(configuration)
    return {
        /**
         * Retrieve all lab results
         * @summary Get all lab results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLabResults(options?: any): AxiosPromise<Array<LabResult>> {
            return localVarFp.getAllLabResults(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific lab result by its ID
         * @summary Get lab result by ID
         * @param {string} resultId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabResultById(resultId: string, options?: any): AxiosPromise<LabResult> {
            return localVarFp.getLabResultById(resultId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific lab result by its ID
         * @summary Update a lab result
         * @param {string} resultId 
         * @param {LabResult} labResult 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLabResult(resultId: string, labResult: LabResult, options?: any): AxiosPromise<void> {
            return localVarFp.updateLabResult(resultId, labResult, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LabResultsApi - interface
 * @export
 * @interface LabResultsApi
 */
export interface LabResultsApiInterface {
    /**
     * Retrieve all lab results
     * @summary Get all lab results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabResultsApiInterface
     */
    getAllLabResults(options?: AxiosRequestConfig): AxiosPromise<Array<LabResult>>;

    /**
     * Retrieve a specific lab result by its ID
     * @summary Get lab result by ID
     * @param {string} resultId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabResultsApiInterface
     */
    getLabResultById(resultId: string, options?: AxiosRequestConfig): AxiosPromise<LabResult>;

    /**
     * Update a specific lab result by its ID
     * @summary Update a lab result
     * @param {string} resultId 
     * @param {LabResult} labResult 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabResultsApiInterface
     */
    updateLabResult(resultId: string, labResult: LabResult, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * LabResultsApi - object-oriented interface
 * @export
 * @class LabResultsApi
 * @extends {BaseAPI}
 */
export class LabResultsApi extends BaseAPI implements LabResultsApiInterface {
    /**
     * Retrieve all lab results
     * @summary Get all lab results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabResultsApi
     */
    public getAllLabResults(options?: AxiosRequestConfig) {
        return LabResultsApiFp(this.configuration).getAllLabResults(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific lab result by its ID
     * @summary Get lab result by ID
     * @param {string} resultId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabResultsApi
     */
    public getLabResultById(resultId: string, options?: AxiosRequestConfig) {
        return LabResultsApiFp(this.configuration).getLabResultById(resultId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific lab result by its ID
     * @summary Update a lab result
     * @param {string} resultId 
     * @param {LabResult} labResult 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabResultsApi
     */
    public updateLabResult(resultId: string, labResult: LabResult, options?: AxiosRequestConfig) {
        return LabResultsApiFp(this.configuration).updateLabResult(resultId, labResult, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MedicalRecordsApi - axios parameter creator
 * @export
 */
export const MedicalRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all medical records
         * @summary Get all medical records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMedicalRecords: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/medical-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicalRecordsApi - functional programming interface
 * @export
 */
export const MedicalRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MedicalRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all medical records
         * @summary Get all medical records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMedicalRecords(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MedicalRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMedicalRecords(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MedicalRecordsApi - factory interface
 * @export
 */
export const MedicalRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MedicalRecordsApiFp(configuration)
    return {
        /**
         * Retrieve all medical records
         * @summary Get all medical records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMedicalRecords(options?: any): AxiosPromise<Array<MedicalRecord>> {
            return localVarFp.getAllMedicalRecords(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MedicalRecordsApi - interface
 * @export
 * @interface MedicalRecordsApi
 */
export interface MedicalRecordsApiInterface {
    /**
     * Retrieve all medical records
     * @summary Get all medical records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApiInterface
     */
    getAllMedicalRecords(options?: AxiosRequestConfig): AxiosPromise<Array<MedicalRecord>>;

}

/**
 * MedicalRecordsApi - object-oriented interface
 * @export
 * @class MedicalRecordsApi
 * @extends {BaseAPI}
 */
export class MedicalRecordsApi extends BaseAPI implements MedicalRecordsApiInterface {
    /**
     * Retrieve all medical records
     * @summary Get all medical records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApi
     */
    public getAllMedicalRecords(options?: AxiosRequestConfig) {
        return MedicalRecordsApiFp(this.configuration).getAllMedicalRecords(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VaccinationRecordsApi - axios parameter creator
 * @export
 */
export const VaccinationRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new vaccination record
         * @summary Create a new vaccination record
         * @param {VaccinationRecord} vaccinationRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVaccinationRecord: async (vaccinationRecord: VaccinationRecord, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaccinationRecord' is not null or undefined
            assertParamExists('createVaccinationRecord', 'vaccinationRecord', vaccinationRecord)
            const localVarPath = `/vaccination-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vaccinationRecord, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all vaccination records
         * @summary Get all vaccination records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVaccinationRecords: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vaccination-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaccinationRecordsApi - functional programming interface
 * @export
 */
export const VaccinationRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VaccinationRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new vaccination record
         * @summary Create a new vaccination record
         * @param {VaccinationRecord} vaccinationRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVaccinationRecord(vaccinationRecord, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all vaccination records
         * @summary Get all vaccination records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVaccinationRecords(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VaccinationRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVaccinationRecords(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VaccinationRecordsApi - factory interface
 * @export
 */
export const VaccinationRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VaccinationRecordsApiFp(configuration)
    return {
        /**
         * Add a new vaccination record
         * @summary Create a new vaccination record
         * @param {VaccinationRecord} vaccinationRecord 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: any): AxiosPromise<void> {
            return localVarFp.createVaccinationRecord(vaccinationRecord, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all vaccination records
         * @summary Get all vaccination records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVaccinationRecords(options?: any): AxiosPromise<Array<VaccinationRecord>> {
            return localVarFp.getAllVaccinationRecords(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VaccinationRecordsApi - interface
 * @export
 * @interface VaccinationRecordsApi
 */
export interface VaccinationRecordsApiInterface {
    /**
     * Add a new vaccination record
     * @summary Create a new vaccination record
     * @param {VaccinationRecord} vaccinationRecord 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationRecordsApiInterface
     */
    createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieve all vaccination records
     * @summary Get all vaccination records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationRecordsApiInterface
     */
    getAllVaccinationRecords(options?: AxiosRequestConfig): AxiosPromise<Array<VaccinationRecord>>;

}

/**
 * VaccinationRecordsApi - object-oriented interface
 * @export
 * @class VaccinationRecordsApi
 * @extends {BaseAPI}
 */
export class VaccinationRecordsApi extends BaseAPI implements VaccinationRecordsApiInterface {
    /**
     * Add a new vaccination record
     * @summary Create a new vaccination record
     * @param {VaccinationRecord} vaccinationRecord 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationRecordsApi
     */
    public createVaccinationRecord(vaccinationRecord: VaccinationRecord, options?: AxiosRequestConfig) {
        return VaccinationRecordsApiFp(this.configuration).createVaccinationRecord(vaccinationRecord, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all vaccination records
     * @summary Get all vaccination records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaccinationRecordsApi
     */
    public getAllVaccinationRecords(options?: AxiosRequestConfig) {
        return VaccinationRecordsApiFp(this.configuration).getAllVaccinationRecords(options).then((request) => request(this.axios, this.basePath));
    }
}


